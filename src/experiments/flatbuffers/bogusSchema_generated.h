// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_BOGUSSCHEMA_GALAVANT_TEST_H_
#define FLATBUFFERS_GENERATED_BOGUSSCHEMA_GALAVANT_TEST_H_

#include "flatbuffers/flatbuffers.h"

#include "anotherBogusSchema_generated.h"

namespace Galavant
{
namespace Test
{
struct Hello;

enum FuckYou
{
	FuckYou_FuckYou = 0,
	FuckYou_FuckYouToo = 1,
	FuckYou_MIN = FuckYou_FuckYou,
	FuckYou_MAX = FuckYou_FuckYouToo
};

inline const char **EnumNamesFuckYou()
{
	static const char *names[] = {"FuckYou", "FuckYouToo", nullptr};
	return names;
}

inline const char *EnumNameFuckYou(FuckYou e)
{
	return EnumNamesFuckYou()[static_cast<int>(e)];
}

struct Hello FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
{
	enum
	{
		VT_STATUS = 4,
		VT_VALUE = 6,
		VT_MESSAGE = 8
	};
	FuckYou status() const
	{
		return static_cast<FuckYou>(GetField<int8_t>(VT_STATUS, 0));
	}
	int32_t value() const
	{
		return GetField<int32_t>(VT_VALUE, 1232);
	}
	const Galavant::Test::HelloReply *message() const
	{
		return GetPointer<const Galavant::Test::HelloReply *>(VT_MESSAGE);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
		return VerifyTableStart(verifier) && VerifyField<int8_t>(verifier, VT_STATUS) &&
				 VerifyField<int32_t>(verifier, VT_VALUE) &&
				 VerifyField<flatbuffers::uoffset_t>(verifier, VT_MESSAGE) &&
				 verifier.VerifyTable(message()) && verifier.EndTable();
	}
};

struct HelloBuilder
{
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_status(FuckYou status)
	{
		fbb_.AddElement<int8_t>(Hello::VT_STATUS, static_cast<int8_t>(status), 0);
	}
	void add_value(int32_t value)
	{
		fbb_.AddElement<int32_t>(Hello::VT_VALUE, value, 1232);
	}
	void add_message(flatbuffers::Offset<Galavant::Test::HelloReply> message)
	{
		fbb_.AddOffset(Hello::VT_MESSAGE, message);
	}
	HelloBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb)
	{
		start_ = fbb_.StartTable();
	}
	HelloBuilder &operator=(const HelloBuilder &);
	flatbuffers::Offset<Hello> Finish()
	{
		auto o = flatbuffers::Offset<Hello>(fbb_.EndTable(start_, 3));
		return o;
	}
};

inline flatbuffers::Offset<Hello> CreateHello(
	flatbuffers::FlatBufferBuilder &_fbb, FuckYou status = FuckYou_FuckYou, int32_t value = 1232,
	flatbuffers::Offset<Galavant::Test::HelloReply> message = 0)
{
	HelloBuilder builder_(_fbb);
	builder_.add_message(message);
	builder_.add_value(value);
	builder_.add_status(status);
	return builder_.Finish();
}

inline const Galavant::Test::Hello *GetHello(const void *buf)
{
	return flatbuffers::GetRoot<Galavant::Test::Hello>(buf);
}

inline bool VerifyHelloBuffer(flatbuffers::Verifier &verifier)
{
	return verifier.VerifyBuffer<Galavant::Test::Hello>(nullptr);
}

inline void FinishHelloBuffer(flatbuffers::FlatBufferBuilder &fbb,
								flatbuffers::Offset<Galavant::Test::Hello> root)
{
	fbb.Finish(root);
}

}  // namespace Test
}  // namespace Galavant

#endif  // FLATBUFFERS_GENERATED_BOGUSSCHEMA_GALAVANT_TEST_H_
