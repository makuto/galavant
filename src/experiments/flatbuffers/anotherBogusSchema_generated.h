// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ANOTHERBOGUSSCHEMA_GALAVANT_TEST_H_
#define FLATBUFFERS_GENERATED_ANOTHERBOGUSSCHEMA_GALAVANT_TEST_H_

#include "flatbuffers/flatbuffers.h"

namespace Galavant
{
namespace Test
{
struct HelloReply;

struct HelloReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
{
	enum
	{
		VT_MESSAGE = 4
	};
	const flatbuffers::String *message() const
	{
		return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
	}
	bool Verify(flatbuffers::Verifier &verifier) const
	{
		return VerifyTableStart(verifier) &&
			   VerifyField<flatbuffers::uoffset_t>(verifier, VT_MESSAGE) &&
			   verifier.Verify(message()) && verifier.EndTable();
	}
};

struct HelloReplyBuilder
{
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_message(flatbuffers::Offset<flatbuffers::String> message)
	{
		fbb_.AddOffset(HelloReply::VT_MESSAGE, message);
	}
	HelloReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb)
	{
		start_ = fbb_.StartTable();
	}
	HelloReplyBuilder &operator=(const HelloReplyBuilder &);
	flatbuffers::Offset<HelloReply> Finish()
	{
		auto o = flatbuffers::Offset<HelloReply>(fbb_.EndTable(start_, 1));
		return o;
	}
};

inline flatbuffers::Offset<HelloReply> CreateHelloReply(
	flatbuffers::FlatBufferBuilder &_fbb, flatbuffers::Offset<flatbuffers::String> message = 0)
{
	HelloReplyBuilder builder_(_fbb);
	builder_.add_message(message);
	return builder_.Finish();
}

inline flatbuffers::Offset<HelloReply> CreateHelloReplyDirect(flatbuffers::FlatBufferBuilder &_fbb,
															  const char *message = nullptr)
{
	return CreateHelloReply(_fbb, message ? _fbb.CreateString(message) : 0);
}

inline const Galavant::Test::HelloReply *GetHelloReply(const void *buf)
{
	return flatbuffers::GetRoot<Galavant::Test::HelloReply>(buf);
}

inline bool VerifyHelloReplyBuffer(flatbuffers::Verifier &verifier)
{
	return verifier.VerifyBuffer<Galavant::Test::HelloReply>(nullptr);
}

inline void FinishHelloReplyBuffer(flatbuffers::FlatBufferBuilder &fbb,
								   flatbuffers::Offset<Galavant::Test::HelloReply> root)
{
	fbb.Finish(root);
}

}  // namespace Test
}  // namespace Galavant

#endif  // FLATBUFFERS_GENERATED_ANOTHERBOGUSSCHEMA_GALAVANT_TEST_H_
